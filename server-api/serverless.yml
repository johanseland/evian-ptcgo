# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: evian-ptcgo-server-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true

    seed:
      domain:
        sources:
          - table: evian-ptcgo-nickname-table
            sources: [./mocks/seed-nickname.json]
    # Uncomment only if you already have a DynamoDB running locally
     #noStart: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-1

   # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: evian-ptcgo-user-profile-table
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    NicknameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: evian-ptcgo-nickname-table
        AttributeDefinitions:
          - AttributeName: nickname
            AttributeType: S
        KeySchema:
          - AttributeName: nickname
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MatchesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: evian-ptcgo-match-table
        AttributeDefinitions:
          - AttributeName: matchId
            AttributeType: S
          - AttributeName: player1Name
            AttributeType: S
          - AttributeName: player2Name
            AttributeType: S
        KeySchema:
          - AttributeName: matchId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: Player1Index
            KeySchema: 
              - AttributeName: player1Name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: Player2Index
            KeySchema: 
              - AttributeName: player2Name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          


functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: lambda_handler.create
    events:
      - http:
          path: players
          method: post
          cors: true
          authorizer: aws_iam
  getUserProfile:
    handler: lambda_handler.getUserProfile
    events:
      - http:
          path: players
          method: get
          cors: true
          authorizer: aws_iam
